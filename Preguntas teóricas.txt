Preguntas teóricas sobre TypeScript (2 puntos)
- Los estudiantes deberán responder a preguntas sobre los conceptos clave de TypeScript, incluyendo:

    - Qué es TypeScript y para qué se utiliza?

TypeScript es un lenguaje de programación desarrollado por Microsoft que añade tipado estático opcional.
Esto significa que, a diferencia de JavaScript, TypeScript permite declarar explícitamente los tipos de
variables, funciones y objetos, ayudando a prevenir errores en tiempo de compilación y mejorando la calidad
y capacidad de mantener el código.

    - cuáles son las principales diferencias entre TypeScript y JavaScript?

Las principales diferencias están en que TypeScript es de tipado estático (el tipo se verifica en tiempo de 
compilación) y JavaScript es de tipado dinámico (el tipo se determina en tiempo de ejecución). Las ventajas 
de utilizar TypeScript abarca la detección temprana de errores (antes de ejecutar el código), lo que permite
una práctica preventiva. En cambio con Javascript, los errores son detectados cuando el código se ejecuta, 
es decir, los errores no se sabrán hasta ese momento, y si no estamos constantemente comprobando cada cambio,
será más dificil y lento encontrar el error. Esto conduce a una práctica reactiva y con muchos errores.

    - por qué es útil TypeScript en el desarrollo de aplicaciones ReactJS?

Porque se puede usar para definir tipos para props (Se pueden definir las props que espera un componente), 
estados (Se puede tipar el estado interno de un componente para asegurar que solo se manipulen datos válidos),
eventos y funciones.

TypeScript cuenta con autocompletado, resaltado de errores y refactorización automática; lo que además de reducir errores
mejora la experiencia del desarrollador, y facilita el cambio asertivo de valores o variables.

    - qué es el sistema de tipos en TypeScript y cómo ayuda a evitar errores en tiempo de desarrollo?
   
    Definiendo tipos en TypeScript

Los tipos son una forma de restringir qué valores puede tomar una variable. Esto incluye tipos primitivos como string, number, boolean, así como tipos personalizados
definidos por el desarrollador.
